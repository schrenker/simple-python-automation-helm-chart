# Cronjob that manages a persistentVolume, allowing access to host logs
# This is useful for engineers, that want to block mounting hostPath volumes inside pods with policies from Kyverno, OPA, etc.
# With such volume, hostPath can be blocked for all pods, while still allowing to access the host logs (or any other host path), via PVC
# When PVC is removed, the volume is no longer available for binding, therefore needs to be "refreshed"
# This cronjob creates PV when missing, and when it's released (PVC is deleted), deletes the PV and recreates it.
# Following yaml can be used to bind the PV created in example:
## apiVersion: v1
## kind: PersistentVolumeClaim
## metadata:
##   name: user-host-logs-claim
## spec:
##   storageClassName: manual
##   volumeName: user-host-logs
##   accessModes:
##     - ReadOnlyMany
##   resources:
##     requests:
##       storage: 1

---
script:
  main.py: |
    import os
    from kubernetes import client, config


    def create_pv():
        v1 = client.CoreV1Api()
        v1.create_persistent_volume(
            client.V1PersistentVolume(
                metadata=client.V1ObjectMeta(name=os.environ["PV_NAME"]),
                spec=client.V1PersistentVolumeSpec(
                    access_modes=["ReadOnlyMany"],
                    capacity={"storage": "1"},
                    host_path=client.V1HostPathVolumeSource(path="/var/log", type=""),
                    persistent_volume_reclaim_policy="Retain",
                    storage_class_name="manual",
                    volume_mode="Filesystem",
                ),
            ),
            async_req=False,
        )


    if __name__ == "__main__":
        config.load_incluster_config()
        v1 = client.CoreV1Api()

        try:
            pv = v1.read_persistent_volume(os.environ["PV_NAME"], async_req=False)
            if pv.status.phase == "Released":
                print("PersistentVolume Released, recreating.")
                v1.delete_persistent_volume(os.environ["PV_NAME"], grace_period_seconds=0, async_req=False)
                create_pv()
            else:
                print("No actions taken.")
        except client.ApiException as e:
            if e.status == 404:
                print("PersistentVolume not found, creating.")
                create_pv()


mode: cronjob

cronjob:
  schedule: "*/5 * * * *"
  cronjobSpec:
    successfulJobsHistoryLimit: 1
  jobSpec:
    backoffLimit: 0

env:
  - name: PV_NAME
    value: user-host-logs

resources:
  requests:
    cpu: 50m
    memory: 64Mi
  limits:
    memory: 64Mi

rbac:
  clusterWide: true
  rules:
    - apiGroups: [""]
      resources: ["persistentvolumes"]
      verbs: ["create"]
    - apiGroups: [""]
      resources: ["persistentvolumes"]
      verbs: ["get", "delete"]
      resourceNames: ["user-host-logs"]
